AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for an Automated AWS Data Lake

Parameters:
  EnvironmentName:
    Type: String
    Default: dev
    Description: The environment name (e.g., dev, prod)
  DatabaseUsername:
    Type: String
    Default: admin
    Description: The master username for the RDS instance
  DatabasePassword:
    Type: String
    NoEcho: true
    Description: The master password for the RDS instance
  GlueJobScriptBucket:
    Type: String
    Description: S3 bucket containing Glue job scripts (PySpark)
  GlueJobScriptPrefix:
    Type: String
    Default: scripts
    Description: S3 prefix for Glue job scripts

Resources:

  LandingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "datalake-landing-${EnvironmentName}"

  LandingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LandingBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'RequireSSE'
            Effect: Deny
            Principal: '*'
            Action: 's3:PutObject'
            Resource: !Sub 'arn:aws:s3:::${LandingBucket}/*'
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': 'AES256'

  CuratedBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "datalake-curated-${EnvironmentName}"
      
  CuratedBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CuratedBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'RequireSSE'
            Effect: Deny
            Principal: '*'
            Action: 's3:PutObject'
            Resource: !Sub 'arn:aws:s3:::${CuratedBucket}/*'
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': 'AES256'

  ScriptBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref GlueJobScriptBucket

  ScriptBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ScriptBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'RequireSSE'
            Effect: Deny
            Principal: '*'
            Action: 's3:PutObject'
            Resource: !Sub 'arn:aws:s3:::${ScriptBucket}/*'
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': 'AES256'

  DataIngestionTrigger:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: python3.9
      Code:
        S3Bucket: !Ref ScriptBucket
        S3Key: data_ingestion_trigger.zip
      Role: !GetAtt DataIngestionTriggerRole.Arn

  DataIngestionTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DataIngestionTriggerPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${LandingBucket}/*"

  DataLakeOrchestrator:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        !Sub |
          {
            "Comment": "Data Lake Orchestration Workflow",
            "StartAt": "TriggerGlueCrawler",
            "States": {
              "TriggerGlueCrawler": {
                "Type": "Task",
                "Resource": "arn:aws:states:::glue:startCrawler.sync",
                "Parameters": {
                  "Name": "${DataLakeCrawler}"
                },
                "Next": "TriggerGlueJob"
              },
              "TriggerGlueJob": {
                "Type": "Task",
                "Resource": "arn:aws:states:::glue:startJobRun.sync",
                "Parameters": {
                  "JobName": "${DataProcessingJob}"
                },
                "End": true
              }
            }
          }
      RoleArn: !GetAtt DataLakeOrchestratorRole.Arn

  DataLakeOrchestratorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DataLakeOrchestratorPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - glue:StartJobRun
                  - glue:GetJobRun
                  - glue:GetTable
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource: '*'
              - Effect: Allow
                Action:
                  - lakeformation:GetDataAccess
                Resource: '*'

  DataProcessingJob:
    Type: AWS::Glue::Job
    Properties:
      Command:
        Name: glueetl
        ScriptLocation: !Sub "s3://${GlueJobScriptBucket}/${GlueJobScriptPrefix}/process_data.py"
      Role: !GetAtt GlueJobRole.Arn
      DefaultArguments:
        "--job-bookmark-option": "job-bookmark-disable"
        "--enable-metrics": ""
        "--landing_bucket": !Ref LandingBucket
        "--curated_bucket": !Ref CuratedBucket
        "--database_connection_string": !Sub "postgresql://${DatabaseUsername}:${DatabasePassword}@${MyRDSInstance.Endpoint.Address}:${MyRDSInstance.Endpoint.Port}/datalake"
      GlueVersion: "3.0"
      MaxCapacity: 10

  GlueJobRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: GlueJobPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Ref LandingBucket
                  - !Ref CuratedBucket
              - Effect: Allow
                Action:
                  - glue:GetDatabase
                  - glue:GetTable
                  - glue:GetPartitions
                  - glue:CreateTable
                  - glue:UpdateTable
                  - glue:BatchCreatePartition
                  - glue:BatchUpdatePartition
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  DataLakeCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      DatabaseName: !Sub "datalake_${EnvironmentName}"
      Role: !GetAtt GlueCrawlerRole.Arn
      Targets:
        S3Targets:
          - Path: !Sub "s3://${LandingBucket}/"

  GlueCrawlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: GlueCrawlerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Ref LandingBucket
              - Effect: Allow
                Action:
                  - glue:GetDatabase
                  - glue:GetTable
                  - glue:CreateTable
                  - glue:UpdateTable
                  - glue:BatchCreatePartition
                  - glue:BatchUpdatePartition
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  LakeFormationPermissions:
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt GlueJobRole.Arn
      Resource:
        DataLocationResource:
          S3Resource: !Ref CuratedBucket
      Permissions:
        - DATA_LOCATION_ACCESS

  KinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      ShardCount: 1
      StreamName: !Sub "datalake-stream-${EnvironmentName}"

  KinesisToS3Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: python3.9
      Code:
        S3Bucket: !Ref ScriptBucket
        S3Key: kinesis_to_s3.zip
      Role: !GetAtt KinesisToS3LambdaRole.Arn
      Environment:
        Variables:
          LANDING_BUCKET: !Ref LandingBucket

  KinesisToS3LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: KinesisToS3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::${LandingBucket}/*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - kinesis:GetRecords
                  - kinesis:GetShardIterator
                  - kinesis:DescribeStream
                  - kinesis:ListStreams
                Resource: "*"

  KinesisToS3EventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 100
      StartingPosition: TRIM_HORIZON
      EventSourceArn: !GetAtt KinesisStream.Arn
      FunctionName: !GetAtt KinesisToS3Lambda.Arn

  MyRDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub "datalake-db-${EnvironmentName}"
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: postgres
      MasterUsername: !Ref DatabaseUsername
      MasterUserPassword: !Ref DatabasePassword
      DBName: datalake
      VPCSecurityGroups:
        - !GetAtt MyRDSSecurityGroup.GroupId
      PubliclyAccessible: true

  MyRDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to RDS instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0

Outputs:
  LandingBucketName:
    Description: Name of the Landing S3 bucket
    Value: !Ref LandingBucket
  CuratedBucketName:
    Description: Name of the Curated S3 bucket
    Value: !Ref CuratedBucket
  DataLakeOrchestratorArn:
    Description: ARN of the Step Functions State Machine for data lake orchestration
    Value: !Ref DataLakeOrchestrator
  GlueJobName:
    Description: Name of the Glue job for data processing
    Value: !Ref DataProcessingJob
  DataLakeCrawlerName:
    Description: Name of the Glue Crawler for cataloging data
    Value: !Ref DataLakeCrawler
  RDSInstanceEndpoint:
    Description: Endpoint of the RDS instance
    Value: !GetAtt MyRDSInstance.Endpoint.Address
  RDSInstancePort:
    Description: Port of the RDS instance
    Value: !GetAtt MyRDSInstance.Endpoint.Port